#day 1 
#problem 1422. max score after splitting (python)
class Solution(object):
    def maxScore(self, s):
        """
        :type s: str
        :rtype: int
        """
        maxscore = 0
        n = len(s)
        for i in range(1,n):
            left = s[:i]
            right = s[i:]
            leftzero = left.count('0')
            rightone = right.count('1')
            score = leftzero + rightone
            maxscore = max(maxscore , score)
        return maxscore


#day 2 
#problem 2559. count vowel strings in ranges (python)
class Solution(object):
    def vowelStrings(self, words, queries):
        """
        :type words: List[str]
        :type queries: List[List[int]]
        :rtype: List[int]
        """
        def is_vowel_string(s):
            vowels = {'a', 'e', 'i', 'o', 'u'}
            return s[0].lower() in vowels and s[-1].lower() in vowels

        n = len(words)
        prefix = [0] * (n + 1)

        for i in range(n):
            prefix[i + 1] = prefix[i] + (1 if is_vowel_string(words[i]) else 0)

        ans = []
        for li, ri in queries:
            ans.append(prefix[ri + 1] - prefix[li])

        return ans


#day 3 
#problem 2270. Number of Ways to Split Array (python)
class Solution(object):
    def waysToSplitArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        total_sum = sum(nums)
        left_sum = 0
        valid_splits = 0

        for i in range(n - 1):  
            left_sum += nums[i]
            right_sum = total_sum - left_sum

            if left_sum >= right_sum:
                valid_splits += 1

        return valid_splits


#day 4 
#problem 1930. Unique Length-3 Palindromic Subsequences (python)
class Solution(object):
    def countPalindromicSubsequence(self, s):
        """
        :type s: str
        :rtype: int
        """
        first_occurrence = {}
        last_occurrence = {}
        for i, char in enumerate(s):
            if char not in first_occurrence:
                first_occurrence[char] = i
            last_occurrence[char] = i
        unique_palindromes = set()
        for char in first_occurrence:
            start = first_occurrence[char] + 1
            end = last_occurrence[char]
            if start < end:
                middle_chars = set(s[start:end])
                for middle_char in middle_chars:
                    unique_palindromes.add(char + middle_char + char)

        return len(unique_palindromes)


#day 5 
#problem 2381. Shifting Letters II (python)
class Solution(object):
    def shiftingLetters(self, s, shifts):
        """
        :type s: str
        :type shifts: List[List[int]]
        :rtype: str
        """
        s = list(s)
        n = len(s)
        shift_values = [0] * (n + 1)
        for start, end, direction in shifts:
            if direction == 1:
                shift_values[start] += 1
                shift_values[end + 1] -= 1
            else:
                shift_values[start] -= 1
                shift_values[end + 1] += 1
        net_shifts = [0] * n
        current_shift = 0
        for i in range(n):
            current_shift += shift_values[i]
            net_shifts[i] = current_shift
        for i in range(n):
            new_char = chr((ord(s[i]) - ord('a') + net_shifts[i]) % 26 + ord('a'))
            s[i] = new_char
        return ''.join(s)


#day 6 
#problem 1769. Minimum Number of Operations to Move All Balls to Each Box (python)
class Solution(object):
    def minOperations(self, boxes):
        """
        :type boxes: str
        :rtype: List[int]
        """
        n = len(boxes)
        answer = [0] * n
        count = 0 
        operations = 0 
        for i in range(n):
            answer[i] += operations
            if boxes[i] == '1':
                count += 1
            operations += count
        count = 0
        operations = 0
        for i in range(n - 1, -1, -1):
            answer[i] += operations
            if boxes[i] == '1':
                count += 1
            operations += count

        return answer


#day 7 
#problem 1408. String Matching in an Array (python)
class Solution(object):
    def stringMatching(self, words):
        """
        :type words: List[str]
        :rtype: List[str]
        """
        result = set()
        n = len(words)

        for i in range(n):
            for j in range(n):
                if i != j and words[i] in words[j]:
                    result.add(words[i])

        return list(result)

#day8 
#problem 3042. Count Prefix and Suffix Pairs I (python)
class Solution(object):
    def countPrefixSuffixPairs(self, words):  
        """
        :type words: List[str]
        :rtype: int
        """
        def isPrefixAndSuffix(str1, str2):
            return str2.startswith(str1) and str2.endswith(str1)

        count = 0
        n = len(words)
        for i in range(n):
            for j in range(i + 1, n):
                if isPrefixAndSuffix(words[i], words[j]):
                    count += 1
        return count


#day 9 
#problem 2185. Counting Words With a Given Prefix (python)
class Solution(object):
    def prefixCount(self, words, pref):
        """
        :type words: List[str]
        :type pref: str
        :rtype: int
        """
        count = 0
        for word in words:
            if word.startswith(pref):
                count += 1
        return count


#day 10 
#916. Word Subsets (python)
class Solution(object):
    def wordSubsets(self, words1, words2):
        """
        :type words1: List[str]
        :type words2: List[str]
        :rtype: List[str]
        """
        from collections import Counter
        def get_max_frequencies(words):
            max_freq = Counter()
            for word in words:
                freq = Counter(word)
                for char in freq:
                    max_freq[char] = max(max_freq[char], freq[char])
            return max_freq
        max_b_freq = get_max_frequencies(words2)
        def is_universal(word):
            word_freq = Counter(word)
            for char in max_b_freq:
                if word_freq[char] < max_b_freq[char]:
                    return False
            return True
        return [word for word in words1 if is_universal(word)]


#day 11 
#1400. Construct K Palindrome Strings (python)
from collections import Counter

class Solution(object):
    def canConstruct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: bool
        """
        if k > len(s):
            return False
        char_count = Counter(s)
        odd_count = sum(1 for count in char_count.values() if count % 2 == 1)
        return odd_count <= k


#day 12 
#2116. Check if a Parentheses String Can Be Valid(python)
class Solution(object):
    def canBeValid(self, s, locked):
        """
        :type s: str
        :type locked: str
        :rtype: bool
        """
        if len(s) % 2 != 0:
            return False
        open_balance = 0
        for i in range(len(s)):
            if locked[i] == '1':
                if s[i] == '(':
                    open_balance += 1
                else:
                    open_balance -= 1
            else:
                open_balance += 1
            if open_balance < 0:
                return False
        close_balance = 0
        for i in range(len(s) - 1, -1, -1):
            if locked[i] == '1':
                if s[i] == ')':
                    close_balance += 1
                else:
                    close_balance -= 1
            else:
                close_balance += 1
            if close_balance < 0:
                return False

        return True


4. Median of Two Sorted Arrays(C)
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }

    int x = nums1Size;
    int y = nums2Size;
    int low = 0, high = x;

    while (low <= high) {
        int partitionX = (low + high) / 2;
        int partitionY = (x + y + 1) / 2 - partitionX;

        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
        int minX = (partitionX == x) ? INT_MAX : nums1[partitionX];

        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
        int minY = (partitionY == y) ? INT_MAX : nums2[partitionY];

        if (maxX <= minY && maxY <= minX) {
            if ((x + y) % 2 == 0) {
                return ((double)fmax(maxX, maxY) + fmin(minX, minY)) / 2;
            } else {
                return (double)fmax(maxX, maxY);
            }
        } else if (maxX > minY) {
            high = partitionX - 1;
        } else {
            low = partitionX + 1;
        }
    }
    return -1;
}


#problem 258. Add Digits (C)
int addDigits(int num) {
    while ( num >= 10) {
        int sum = 0 , rem ;
        while ( num > 0) {
            rem = num % 10;
            sum = sum + rem;
            num = num / 10;
        }
        num = sum;
    }
    return num;
}


#problem 88. Merge Sorted Array (C)
void merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){
    int i = m - 1;
    int j = n -1;
    while(i>=0 && j>=0) {
        if(nums1[i] > nums2[j]) {
            nums1[i+j+1] = nums1[i];
            i--;
        } else {
            nums1[i+j+1] = nums2[j];
            j--;
        }
    }
    while(j >= 0) {
        nums1[i+j+1] = nums2[j];
        j--;
    }
}

#problem 70. Climbing Stairs (C)
int climbStairs(int n) {
    long long int prv1 = 1;
    long long int prv2 = 1;

    for (int i = 0; i < n; i++) {
        long long int tmp = prv1;
        prv1 = prv1 + prv2;
        prv2 = tmp;
    }

    return (int)prv2;
}

#problem 69. Sqrt(x) (C)
int mySqrt(int x) {
    if(x==0||x==1){
        return x;
    }
    for(long long int i=1;i<=x;i++){
        if(i*i>x){
            return i-1;
        }

    }
return 0;
}

#problem 67. Add Binary (C)
char* addBinary(char* a, char* b) {
    int i=strlen(a), j=strlen(b);
    int aux=0,k=fmax(i, j)+2;
    char* result = (char*) malloc (sizeof(char) * k);
    
    result[--k] = '\0';
    i--; j--;
    while(--k >= 0){
        aux += i >= 0 ? a[i--] - '0': 0;
        aux += j >= 0 ? b[j--] - '0': 0;
        result[k] = aux % 2 + '0';
        aux /= 2;
    }
    if(result[0] == '0') return result+1;
    return result;
}

#problem 66. Plus One (C++)
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
        for(int i=digits.size()-1;i>=0;i--){
            if(digits[i]==9){
                digits[i]=0;
            }
            else{
                digits[i]++;
                return digits;
            }
        }
        digits[0]=1;
        digits.push_back(0);
        return digits;
    }
};

#problem 58. Length of Last Word (C)
int lengthOfLastWord(char* s) {
    const int s_len = strlen(s);
    int i = s_len - 1;
    for (; i >= 0 && s[i] == ' '; --i)
        ;
    int len = 0;
    for (; i >= 0 && s[i] != ' '; --i, ++len)
        ;
    return len;
}

#problem 35. Search Insert Position (python)
import math
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        high = len(nums) - 1
        low = 0
        while low<=high:
            mid = (high + low)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                high = mid - 1
            else:
                low = mid + 1
        return low    

#problem 35. Search Insert Position (python)
import math
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        high = len(nums) - 1
        low = 0
        while low<=high:
            mid = (high + low)//2
            if nums[mid] == target:
                return mid
            elif nums[mid] > target:
                high = mid - 1
            else:
                low = mid + 1
        return low  

#problem 28. Find the Index of the First Occurrence in a String (python)
class Solution:
    def strStr(self, haystack, needle):
        a, b = len(haystack), len(needle)

        for i in range(a - b + 1):
            if haystack[i:i + b] == needle:
                return i

        return -1   

#problem 27. Remove Element (python)
class Solution(object):
    def removeElement(self, nums, val):
        left = 0
        right = len(nums) - 1
        while left <= right:
            if nums[left] == val:
                nums[left], nums[right] = nums[right], nums[left]
                right -= 1
            else:
                left += 1
        return left 

#problem 26. Remove Duplicates from Sorted Array (python)
class Solution(object):
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        idx = 0
        for pos in range(1,len(nums)):
            if (nums[pos] != nums[pos-1]) & (idx!=pos):
                nums[idx+1] = nums[pos]
                idx += 1
        return idx + 1

#problem 916. Word Subsets (python)
class Solution(object):
    def wordSubsets(self, words1, words2):
        """
        :type words1: List[str]
        :type words2: List[str]
        :rtype: List[str]
        """
        from collections import Counter
        def get_max_frequencies(words):
            max_freq = Counter()
            for word in words:
                freq = Counter(word)
                for char in freq:
                    max_freq[char] = max(max_freq[char], freq[char])
            return max_freq
        max_b_freq = get_max_frequencies(words2)
        def is_universal(word):
            word_freq = Counter(word)
            for char in max_b_freq:
                if word_freq[char] < max_b_freq[char]:
                    return False
            return True
        return [word for word in words1 if is_universal(word)]

#problem 1400. Construct K Palindrome Strings (python)
from collections import Counter

class Solution(object):
    def canConstruct(self, s, k):
        """
        :type s: str
        :type k: int
        :rtype: bool
        """
        if k > len(s):
            return False
        char_count = Counter(s)
        odd_count = sum(1 for count in char_count.values() if count % 2 == 1)
        return odd_count <= k

#problem 1769. Minimum Number of Operations to Move All Balls to Each Box
class Solution(object):
    def minOperations(self, boxes):
        """
        :type boxes: str
        :rtype: List[int]
        """
        n = len(boxes)
        answer = [0] * n
        count = 0 
        operations = 0 
        for i in range(n):
            answer[i] += operations
            if boxes[i] == '1':
                count += 1
            operations += count
        count = 0
        operations = 0
        for i in range(n - 1, -1, -1):
            answer[i] += operations
            if boxes[i] == '1':
                count += 1
            operations += count

        return answer

#problem 2116. Check if a Parentheses String Can Be Valid
class Solution(object):
    def canBeValid(self, s, locked):
        """
        :type s: str
        :type locked: str
        :rtype: bool
        """
        if len(s) % 2 != 0:
            return False
        open_balance = 0
        for i in range(len(s)):
            if locked[i] == '1':
                if s[i] == '(':
                    open_balance += 1
                else:
                    open_balance -= 1
            else:
                open_balance += 1
            if open_balance < 0:
                return False
        close_balance = 0
        for i in range(len(s) - 1, -1, -1):
            if locked[i] == '1':
                if s[i] == ')':
                    close_balance += 1
                else:
                    close_balance -= 1
            else:
                close_balance += 1
            if close_balance < 0:
                return False

        return True
